generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  name        String?
  username    String   @unique
  email       String   @unique
  password    String
  dateOfBirth DateTime @map("date_of_birth") @db.Date

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  profile        Profile?
  Message        Message[]
  UserServer     Membership[]
  ReactsMessage  Reaction[]
  refreshTokens  RefreshToken[]
  invites        Invite[]
  mutedBy        UserMute[]     @relation("MutedBy")
  mutedUsers     UserMute[]     @relation("MutedUsers")
  channelBlocks  ChannelBlock[]

  @@index([createdAt])
  @@map("users")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique @db.VarChar(500)
  expiresAt DateTime @map("expires_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, expiresAt])
  @@map("refresh_tokens")
}

model Profile {
  userId   Int     @id @map("user_id")
  bio      String?
  avatar   String?
  banner   String?
  xTwitter String? @map("x_twitter")
  github   String?
  linkedin String?
  facebook String?
  website  String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Server {
  id         Int    @id @default(autoincrement())
  name       String
  servername String @unique

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  channels Channel[]
  members  Membership[]
  roles    Role[]
  invites  Invite[]

  @@index([createdAt])
  @@map("servers")
}

model Channel {
  id     Int           @id @default(autoincrement())
  name   String
  type   ChannelType   @default(TEXT)
  status ChannelStatus @default(PUBLIC)
  isDM   Boolean       @default(false) @map("is_dm")

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  serverId      Int            @map("server_id")
  server        Server         @relation(fields: [serverId], references: [id], onDelete: Cascade)
  messages      Message[]
  channelBlocks ChannelBlock[]

  @@index([isDM, createdAt, serverId])
  @@map("channels")
}

model Role {
  id          Int    @id @default(autoincrement())
  name        String
  permissions Json // e.g., {"manageChannels": true, "kickUsers": false}

  serverId Int          @map("server_id")
  server   Server       @relation(fields: [serverId], references: [id], onDelete: Cascade)
  users    Membership[]

  @@index([serverId])
  @@map("roles")
}

model Message {
  id      Int  @id @default(autoincrement())
  content Json

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  userId          Int             @map("user_id")
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  channelId       Int             @map("channel_id")
  channel         Channel         @relation(fields: [channelId], references: [id], onDelete: Cascade)
  parentMessageId Int?            @map("parent_message_id")
  parentMessage   Message?        @relation("Thread", fields: [parentMessageId], references: [id], onDelete: SetNull)
  replies         Message[]       @relation("Thread")
  attachments     Attachment[]
  reacts          Reaction[]

  @@index([createdAt, deletedAt, userId, channelId, parentMessageId])
  @@map("messages")
}

model Attachment {
  id   Int     @id @default(autoincrement())
  url  String
  type String?
  size Int?

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  messageId Int     @map("message_id")
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@map("attachments")
}

model Membership {
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  userId   Int    @map("user_id")
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  serverId Int    @map("server_id")
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
  roleId   Int?   @map("role_id")
  role     Role?  @relation(fields: [roleId], references: [id], onDelete: SetNull)

  @@id([userId, serverId])
  @@index([roleId])
  @@map("memberships")
}

model Reaction {
  emoji     String
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  messageId Int     @map("message_id")
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  userId    Int     @map("user_id")
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([messageId, userId])
  @@index([emoji])
  @@map("reactions")
}

model Invite {
  id        Int       @id @default(autoincrement())
  code      String    @unique
  expiresAt DateTime? @map("expires_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  serverId  Int    @map("server_id")
  server    Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
  createdBy Int    @map("created_by")
  creator   User   @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([serverId, expiresAt])
  @@map("invites")
}

model UserMute {
  id        Int     @id @default(autoincrement())
  reason    String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId   Int  @map("user_id")
  user     User @relation("MutedBy", fields: [userId], references: [id], onDelete: Cascade)
  targetId Int  @map("target_id")
  target   User @relation("MutedUsers", fields: [targetId], references: [id], onDelete: Cascade)

  @@unique([userId, targetId])
  @@index([userId])
  @@index([targetId])
  @@map("user_mutes")
}

model ChannelBlock {
  id        Int     @id @default(autoincrement())
  reason    String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId    Int     @map("user_id")
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  channelId Int     @map("channel_id")
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@unique([userId, channelId])
  @@index([userId])
  @@index([channelId])
  @@map("channel_blocks")
}

enum ChannelType {
  TEXT
  VOICE
}

enum ChannelStatus {
  PUBLIC
  RESTRICT
  PRIVATE
}
