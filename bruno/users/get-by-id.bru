meta {
  name: get-by-id
  type: http
  seq: 4
}

get {
  url: {{base_url}}/users/{{userId}}
  body: none
  auth: none
}

tests {
  test("Status should be 200 for successful retrieval", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("Response should include user details", function() {
    expect(res.getBody()).to.have.property('id');
    expect(res.getBody()).to.have.property('username');
    expect(res.getBody()).to.have.property('email');
    expect(res.getBody()).to.have.property('name');
  });
  
  test("Retrieved user should match created user", function() {
    expect(res.getBody().id).to.equal(bru.getVar("userId"));
    expect(res.getBody().username).to.equal('johndoe');
    expect(res.getBody().email).to.equal('john@example.com');
  });
  
  test("Handle not found error for invalid ID", function() {
    if (res.getStatus() === 404) {
      expect(res.getBody().message).to.contain('not found');
    }
  });
}
